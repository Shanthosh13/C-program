
#include<iostream>
using namespace std;
class Node{
    public: 
        int data;
        Node* next;
        Node(int val){
            data=val;
            next=nullptr;}};
class QueueLinkedList{
    private:
        Node* rear;
        Node *front;
    public:
        QueueLinkedList(){
            front=rear=nullptr;}
        void enqueue(int val){
            Node *newNode=new Node(val);
            if(rear==nullptr){
                rear=front=newNode;
                return;
            }
            rear->next=newNode;
            rear=newNode;
        }
        void dequeue(){
            if(front==nullptr){
                cout<<"Queue underflow";return;
            }
            Node *temp=front;
            front=front->next;//1200->nullptr
            //if queue becomes empty
            if(front==nullptr){
                rear=nullptr;
            }
            delete temp;
        }
        void peek(){
            cout<<front->data;
        }void isEmpty(){
            if(front==nullptr)
                cout<<"Yes";
            else
                cout<<"No";
        }
        void display(){
            Node *temp=front;
            while(temp!=nullptr){
                cout<<temp->data<<"->";
                temp=temp->next;
            }cout<<"NULL\n";
        }
};
int main(){
    QueueLinkedList qu;
    qu.isEmpty();qu.enqueue(10);qu.enqueue(20);
    qu.enqueue(30);qu.enqueue(40);
    qu.display();
    //stack: 40->30->20->10
    //queue: 10->20->30->40->NULL
}
